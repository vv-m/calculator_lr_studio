import React, { useState, useEffect } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Container, Row, Col, Form, Button, Card } from 'react-bootstrap';

export const alarmTextAir = "–í–µ—Å –ø—Ä–µ–≤—ã—à–µ–Ω\n (–¥–æ 50–∫–≥)";

// –¶–µ–Ω—ã –ñ–î
const priceRailwayForKG = 2.4;  // USD –∑–∞ –∫–≥
const priceRailwayForCUB = 290;  // USD –∑–∞ –∫–≥

// –¶–µ–Ω—ã –ê–≤—Ç–æ
const priceAutoForKG = 5.8;  // USD –∑–∞ –∫–≥
const priceAutoForCUB = 440;  // USD –∑–∞ –∫–≥

// –¶–µ–Ω–∞ –ê–≤–∏–∞
const priceAirForKG = 24;  // USD –∑–∞ –∫–≥

// –ù–∞–¥–±–∞–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å –¶–ë
const markupCBPercent = 10;  // %
const markupCB = (markupCBPercent / 100) + 1;

// –¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
const railWay = {
    name: "–ñ/–î üöÇ",
    deliveryTime: "40-60"  // –¥–Ω–µ–π
};

const auto = {
    name: "–ê–≤—Ç–æ üöõ",
    deliveryTime: "20-40"  // –¥–Ω–µ–π
};

const air = {
    name: "–ê–≤–∏–∞ ‚úàÔ∏è",
    deliveryTime: "12-17"  // –¥–Ω–µ–π
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
const ProductCard = ({ name, deliveryTime, price }) => {
    return (
        <Card className="mb-3">
            <Card.Body className="d-flex justify-content-between align-items-center">
                <div>
                    <Card.Title>{name}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {deliveryTime} –¥–Ω–µ–π</Card.Subtitle>
                </div>
                <div>
                    <Card.Text className={`${price ? 'fs-4' : 'fs-6 text-danger'} text-end mb-0`}>
                        {price ? `${price} ‚ÇΩ` : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞'}
                    </Card.Text>
                </div>
            </Card.Body>
        </Card>
    );
};

function CalculatorForm() {
    const [weight, setWeight] = useState('');
    const [size1, setSize1] = useState('');
    const [size2, setSize2] = useState('');
    const [size3, setSize3] = useState('');
    const [volume, setVolume] = useState('');
    const [currency, setCurrency] = useState('USD');
    const [calcMode, setCalcMode] = useState('volume'); // dimensions –∏–ª–∏ volume
    const [usdValue, setUsdValue] = useState(0);
    const [rmbValue, setRmbValue] = useState(0);
    const [coast, setCoast] = useState('');
    const [coastOfItemByRUB, setCoastOfItemByRUB] = useState(0);
    const [resultByRailway, setResultByRailway] = useState('');
    const [resultByAuto, setResultByAuto] = useState('');
    const [resultByAir, setResultByAir] = useState('');

    const handleChange = (event, setter) => {
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        let value = event.target.value.replace(/,/g, '.');

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ –æ–¥–Ω—É —Ç–æ—á–∫—É
        value = value.replace(/[^\d.]/g, '');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
        const parts = value.split('.');
        if (parts.length > 2) {
            // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é
            value = parts[0] + '.' + parts.slice(1).join('');
        }

        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–µ–π –Ω–æ–ª—å
        if (value.startsWith('.')) {
            value = '0' + value;
        }

        setter(value);
    };

    // –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    useEffect(() => {
        if (calcMode === 'dimensions' && size1 && size2 && size3) {
            const calculatedVolume = (Number(size1) * Number(size2) * Number(size3) / 1000000).toFixed(6);
            setVolume(calculatedVolume);
        }
    }, [size1, size2, size3, calcMode]);

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á–µ—Ç–∞
    useEffect(() => {
        if (calcMode === 'dimensions') {
            setVolume(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã
        } else {
            setSize1(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –æ–±—ä–µ–º
            setSize2('');
            setSize3('');
        }
    }, [calcMode]);

    const calculateResult = () => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (!weight || !coast ||
            (calcMode === 'dimensions' && (!size1 || !size2 || !size3)) ||
            (calcMode === 'volume' && !volume)) {
            setResultByRailway('');
            setResultByAuto('');
            setResultByAir('');
            return;
        }

        let currentCurrencyValue = 0;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
        if (currency === "USD") {
            currentCurrencyValue = usdValue * markupCB;
        } else if (currency === "RMB") {
            currentCurrencyValue = rmbValue * markupCB;
        }

        // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
        const itemCostInRub = Number(coast) * currentCurrencyValue;
        setCoastOfItemByRUB(itemCostInRub);

        // –û–±—ä–µ–º - –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤, –∏–ª–∏ –±–µ—Ä–µ–º –ø—Ä—è–º–æ –∏–∑ –ø–æ–ª—è –æ–±—ä–µ–º–∞
        const volumeValue = calcMode === 'dimensions'
            ? Number(size1) * Number(size2) * Number(size3) / 1000000
            : Number(volume);

        // ======= –ñ–î =======
        // –†–∞—Å—á–µ—Ç –ø–æ –≤–µ—Å—É
        const coastRailwayKG = Number(weight) * priceRailwayForKG * usdValue * markupCB + itemCostInRub;
        // –†–∞—Å—á–µ—Ç –ø–æ –æ–±—ä–µ–º—É
        const coastRailwayCUB = volumeValue * priceRailwayForCUB * usdValue * markupCB + itemCostInRub;
        // –í—ã–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const coastRailway = Math.max(coastRailwayKG, coastRailwayCUB);

        // ======= –ê–í–¢–û =======
        // –†–∞—Å—á–µ—Ç –ø–æ –≤–µ—Å—É
        const coastAutoKG = Number(weight) * priceAutoForKG * usdValue * markupCB + itemCostInRub;
        // –†–∞—Å—á–µ—Ç –ø–æ –æ–±—ä–µ–º—É
        const coastAutoCUB = volumeValue * priceAutoForCUB * usdValue * markupCB + itemCostInRub;
        // –í—ã–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const coastAuto = Math.max(coastAutoKG, coastAutoCUB);

        // ======= –ê–í–ò–ê =======
        // –¢–æ–ª—å–∫–æ –ø–æ –≤–µ—Å—É
        const coastAir = Number(weight) * priceAirForKG * usdValue * markupCB + itemCostInRub;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setResultByRailway(Math.round(coastRailway).toLocaleString('ru-RU'));
        setResultByAuto(Math.round(coastAuto).toLocaleString('ru-RU'));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞ –¥–ª—è –∞–≤–∏–∞
        if (Number(weight) > 50) {
            setResultByAir(alarmTextAir);
        } else {
            setResultByAir(Math.round(coastAir).toLocaleString('ru-RU'));
        }
    };

    const clearFields = () => {
        setWeight('');
        setSize1('');
        setSize2('');
        setSize3('');
        setVolume('');
        setCoast('');
        // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É –∏ —Ä–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    useEffect(() => {
        fetch('https://www.cbr-xml-daily.ru/daily_utf8.xml')
            .then(response => response.text())
            .then(data => {
                const parser = new DOMParser();
                const xml = parser.parseFromString(data, "text/xml");
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã Valute
                const valutes = xml.getElementsByTagName("Valute");
                for (let i = 0; i < valutes.length; i++) {
                    const charCode = valutes[i].getElementsByTagName("CharCode")[0].textContent;
                    if (charCode === "USD") {
                        let usdValueTMP = valutes[i].getElementsByTagName("Value")[0].textContent;
                        let usd = parseFloat(usdValueTMP.replace(',', '.'));
                        setUsdValue(usd);
                        console.log("USD", usd * markupCB);
                    }
                    if (charCode === "CNY") {
                        let rmbValueTMP = valutes[i].getElementsByTagName("Value")[0].textContent;
                        let rmb = parseFloat(rmbValueTMP.replace(',', '.'));
                        setRmbValue(rmb);
                        console.log("CNY", rmb * markupCB);
                    }
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            });
    }, []);

    // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    useEffect(() => {
        calculateResult();
    }, [weight, size1, size2, size3, volume, currency, coast, usdValue, rmbValue, calcMode]);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        document.title = '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏.';
    }, []);

    return (
        <Container className="py-4">
            <h3 className="mb-4 text-center">–†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π</h3>

            <Row>
                <Col md={6}>
                    <Card className="mb-4">
                        <Card.Header>
                            <h5>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞</h5>
                        </Card.Header>
                        <Card.Body>
                            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á–µ—Ç–∞ */}
                            <Form.Group className="mb-3">
                                <Form.Label>–°–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:</Form.Label>
                                <div>
                                    <Form.Check
                                        inline
                                        type="radio"
                                        id="volume-mode"
                                        label="–ü–æ –æ–±—ä–µ–º—É"
                                        name="calcMode"
                                        checked={calcMode === 'volume'}
                                        onChange={() => setCalcMode('volume')}
                                    />
                                    <Form.Check
                                        inline
                                        type="radio"
                                        id="dimensions-mode"
                                        label="–ü–æ —Ä–∞–∑–º–µ—Ä–∞–º"
                                        name="calcMode"
                                        checked={calcMode === 'dimensions'}
                                        onChange={() => setCalcMode('dimensions')}
                                    />
                                </div>
                            </Form.Group>

                            {/* –ü–æ–ª–µ –≤–µ—Å–∞ */}
                            <Form.Group className="mb-3">
                                <Form.Label>–í–µ—Å, –∫–≥</Form.Label>
                                <Form.Control
                                    type="text"
                                    value={weight}
                                    onChange={(e) => handleChange(e, setWeight)}
                                />
                            </Form.Group>

                            {/* –ü–æ–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–ª–∏ –æ–±—ä–µ–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ */}
                            {calcMode === 'dimensions' ? (
                                <>
                                    <Form.Group className="mb-3">
                                        <Form.Label>–†–∞–∑–º–µ—Ä 1, —Å–º</Form.Label>
                                        <Form.Control
                                            type="text"
                                            value={size1}
                                            onChange={(e) => handleChange(e, setSize1)}
                                        />
                                    </Form.Group>
                                    <Form.Group className="mb-3">
                                        <Form.Label>–†–∞–∑–º–µ—Ä 2, —Å–º</Form.Label>
                                        <Form.Control
                                            type="text"
                                            value={size2}
                                            onChange={(e) => handleChange(e, setSize2)}
                                        />
                                    </Form.Group>
                                    <Form.Group className="mb-3">
                                        <Form.Label>–†–∞–∑–º–µ—Ä 3, —Å–º</Form.Label>
                                        <Form.Control
                                            type="text"
                                            value={size3}
                                            onChange={(e) => handleChange(e, setSize3)}
                                        />
                                    </Form.Group>
                                    <Form.Group className="mb-3">
                                        <Form.Label>–û–±—ä–µ–º, –º¬≥</Form.Label>
                                        <Form.Control
                                            type="text"
                                            value={volume}
                                            disabled
                                        />
                                    </Form.Group>
                                </>
                            ) : (
                                <Form.Group className="mb-3">
                                    <Form.Label>–û–±—ä–µ–º, –º¬≥</Form.Label>
                                    <Form.Control
                                        type="text"
                                        value={volume}
                                        onChange={(e) => handleChange(e, setVolume)}
                                    />
                                </Form.Group>
                            )}

                            {/* –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ */}
                            <Form.Group className="mb-3">
                                <Form.Label>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</Form.Label>
                                <Form.Control
                                    type="text"
                                    value={coast}
                                    onChange={(e) => handleChange(e, setCoast)}
                                />
                            </Form.Group>

                            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∞–ª—é—Ç—ã */}
                            <Form.Group className="mb-3">
                                <Form.Label>–í–∞–ª—é—Ç–∞:</Form.Label>
                                <div>
                                    <Form.Check
                                        inline
                                        type="radio"
                                        id="usd-currency"
                                        label="USD"
                                        name="currency"
                                        checked={currency === 'USD'}
                                        onChange={() => setCurrency('USD')}
                                    />
                                    <Form.Check
                                        inline
                                        type="radio"
                                        id="rmb-currency"
                                        label="RMB"
                                        name="currency"
                                        checked={currency === 'RMB'}
                                        onChange={() => setCurrency('RMB')}
                                    />
                                </div>
                            </Form.Group>

                            {/* –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ) */}
                            <div className="mb-3 text-muted">
                                <small>
                                    –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USD: {usdValue ? (usdValue * markupCB).toFixed(2) : '...'} ‚ÇΩ (—Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏ {markupCBPercent}%)
                                    <br />
                                    –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å RMB: {rmbValue ? (rmbValue * markupCB).toFixed(2) : '...'} ‚ÇΩ (—Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏ {markupCBPercent}%)
                                </small>
                            </div>

                            <Button
                                variant="outline-secondary"
                                onClick={clearFields}
                                className="w-100"
                            >
                                –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
                            </Button>
                        </Card.Body>
                    </Card>
                </Col>

                <Col md={6}>
                    <h5 className="mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</h5>
                    <ProductCard name={railWay.name} deliveryTime={railWay.deliveryTime} price={resultByRailway} />
                    <ProductCard name={auto.name} deliveryTime={auto.deliveryTime} price={resultByAuto} />
                    <ProductCard name={air.name} deliveryTime={air.deliveryTime} price={resultByAir} />
                </Col>
            </Row>
        </Container>
    );
}

export default CalculatorForm;